<소켓 통신 기초개념>
서버와 클라이언트의 대화방식이라는 큰 틀안에서
서로는 대화를 진행한다고 생각하자

HTTP, FTP와 같은 서버들에게 우리는 크롬브라우저, 익스플로러와 같은 브라우저를 통해 나 ~~서버에 요청할게 있어 URL 메시지를 작성한다.
Http://user:password@www.naver.com:80/dir/file1.html 이런식으로 URL을 작성
여기는 생략가능한 사용자명user,비번password,포트번호80,파일경로/dir/file1.html등이 있는데
www.naver.com은 http라는 웹서버에 접근하고자 하는 웹서버의 대상의 이름이 적혀있다
그럼 브라우저는 이 URL을 해석하고 리퀘스트 메시지로 변환한다.
이 리퀘스트 메시지는 무엇을 어떻게 할지에 대한 정보가 들어있다.
이 무엇을은 naver.com회사에, 어떻게는 /dir/file1.html파일을 get 가져와라 라는 정보들이 담겨있다.
이로써 브라우저는 이 리퀘스트 메시지를 통해 naver.com회사에 /dir/file1.html이라는 파일을 가져와라 라는걸 해석하고 리퀘스트 메시지로 변환한다.

이제 본격적으로 메시지가 만들어졌으니 naver서버에 보내면 된다.
naver서버가 메시지를 받고 해석하니 음.. 이 파일을 보내줄게 하고 리소스를 건네주면 그로써 브라우저 화면에 naver화면이 띄워지게 되는것이다.
건네주는 리소스에는 스테이터스 코드와 같은 응답메시지가 있고 
이 스테이터스 코드는 이상과 에러를 검출하는 코드로써 naver에 /dir/file1.html이라는 파일이 없는데라고 하면 404not fount라는 화면을 띄우는 형식이다.

쉽게 이런식이다.
사용자(URL) -> 브라우저(리퀘스트메시지) -> naver(해석 후 응답메시지) -> 브라우저(해석 후 데이터 화면 표시) -> 사용자 화면 봄


하지만 이런 큰 틀안에서 동작하는 과정이 굉장히 많이 있다.
먼저 컴퓨터는 통신을 하는 그 과정에 반드시 주소가 있어야 상대 서버에 연결할 수 있다 하지만 위 통신 과정에서 브라우저에 URL에 IP주소라는게 없다.
그래서 naver.com이라는 이름의 주소를 IP주소로 변환해주는 DNS서버가 반드시 필요하다.
어렵지 않다. 그냥 과정이 하나 더 추가된 것이다.
사용자(URL) -> 브라우저(naver.com IP주소 찾아주라) -> DNS서버(IP주소 찾아줌) -> 브라우저(리퀘스트메시지보냄) -> naver(해석 후 응답메시지) -> 브라우저(해석 후 데이터 화면 표시) -> 사용자 화면 봄

그러면 DNS서버에 DNS를 보내서 IP주소를 얻는건데 DNS주소는 알고있고? 라는 의문이 생길 수 있다.
당연히 지정되어있다. 각 PC별로 DNS서버의 주소가 지정되어있다. dos창에 ipconfig /all치면 알 수 있다.

이런식의 통신이 이루어지는데
소켓 통신이란 무엇이냐

브라우저는 송수인 개념이 없다. 그래서 OS에게 부탁해야만 한다. naver.com DNS서버를 통해서 IP주소를 찾아달라고 그리고 찾으면 그 IP주소서버 naver한테 리퀘스트 메시지를 보내달라고
굉장히 무력하지만 어쩔 수 없다. 이를 통해서 OS는 통신을 진행하는데 먼저 통신을 하기위한 명령서를 작성한다. 그것이 소켓 라이브러리로 작성하는 함수들이다.
그리고 이 함수들로 명령서를 작성하면 프로토콜 스택(OSI7계층 모델, TCP/IP5계층모델)이라는 모델을 이용하여 순차적인 캡슐화서비스로 데이터를 보내는 역할을 한다.

사용자(URL) -> 브라우저(naver.com IP주소 찾아주라) -> OS(ok <Socket.h> getIP(naver.com);) -> OS(프로토콜 스택 모델이용) -> DNS서버(프로토콜 스택으로 받음, getIP(naver.com); ip찾음 보내줌)-> OS(프로토콜 스택으로 받음 다시 IP로 naver.com에게 리퀘스트 메시지 보내줌)
 -> naver(해석 후 응답메시지) -> 브라우저(해석 후 데이터 화면 표시) -> 사용자 화면 봄
조금 복잡할 수 있긴하지만 통신하는 그 과정마다 프로토콜 스택은 필수이며 단순하게 그냥 데이터를 보내는 택배공정과정이구나 라고 생각하면 된다.
(URL,리퀘스트메시지->실제 내용물) -> (IP주소->배송지주소) -> (소켓라이브러리를 이용한 명령서>택배포장) -> (프로토콜 스택->택배접수처)

이 소켓 라이브러리를 이용한 코딩공부는, 소켓 프로그래밍은 택배포장에 가까운 단계이기 때문에
여러 함수를 이용하여 IP주소를 통한 주소지설정, 데이터포장, DNS주소를 통한 DNS의 IP주소 가져오기 등 다양한 함수를 이용하여 프로그래밍을 할것이다.

하기 전 간단하게 함수를 설명하자면
서버측의 함수는 위는 택배로 비유했지만 전화로 비유하겠다.
<SERVER>
소켓(통신장치마련)생성 socket();
주소설정(주소지생성_전화번호생성) bind();
연결가능상태표시(택배받기준비완료_전화개통 전화통화 가능) listen();
연결시 수락(택배받기_전화받기) accept();

<CLIENT>
소켓(통신장치마련_전화기생성) socket();
통신(전화) connect();

이런 식의 함수들을 배울 것이다.

